
# Any crucial variables not set by the INSTALL_FN_* should be set to defaults here:
SET_MISSING_DEFAULTS() {
    #${AAAA:-bbbb}
    export INSTALL_KUBERNETES=${INSTALL_KUBERNETES:-0}
    export DOWNLOAD_PRISMACLOUD=${DOWNLOAD_PRISMACLOUD:-0}
    export INSTALL_PRISMACLOUD=${INSTALL_PRISMACLOUD:-0}
}


# Profile for Kubernetes+PrismaCloud Workshops:
INSTALL_FN_K8S_PrismaCloud() {

    # No automatic PrismaCloud installation for students:
    INSTALL_FN_K8S_MANUAL_PrismaCloud

    # For owner we choose to install extra items:
    [ "$USER_EMAIL" = "$OWNER_ID_OR_EMAIL" ] && {
        export INSTALL_JUPYTER=1

        # Student install does not download/install PrismaCloud: but I'm lazy ...
        export DOWNLOAD_PRISMACLOUD=1 INSTALL_PRISMACLOUD=1 CONFIGURE_NFS=1
        export PRISMACLOUD_RELEASE=20_04_163
        INSTALL_PRISMACLOUD_SH_URL="${RAWREPO_URL}/master/install_pcc.sh"
        #https://cdn.twistlock.com/releases/6e6c2d6a/prisma_cloud_compute_edition_20_04_163.tar.gz
        export PRISMACLOUD_TAR="/tmp/prisma_cloud_compute_edition_${PRISMACLOUD_RELEASE}.tar.gz"
        export PRISMACLOUD_URL="https://cdn.twistlock.com/releases/6e6c2d6a/prisma_cloud_compute_edition_${PRISMACLOUD_RELEASE}.tar.gz"

        [ ! -z "$PRISMACLOUD_ACCESS"  ] && echo "export PRISMACLOUD_ACCESS=$PRISMACLOUD_ACCESS" >> /root/.profile
        [ ! -z "$PRISMACLOUD_LICENSE" ] && echo "$PRISMACLOUD_LICENSE" > /tmp/PCC.license.txt
    }

    export CHECK_COMPLETE_FN=CHECK_FN_K8S_PrismaCloud
    }
    echo "USER_EMAIL=<$USER_EMAIL> OWNER_ID_OR_EMAIL=<$OWNER_ID_OR_EMAIL> INSTALL_JUPYTER=$INSTALL_JUPYTER DOWNLOAD_PRISMACLOUD=$DOWNLOAD_PRISMACLOUD INSTALL_PRISMACLOUD=$INSTALL_PRISMACLOUD"
}

INSTALL_FN_K8S_MANUAL_PrismaCloud() {

    # MY TOOLS:
    export INSTALL_JUPYTER=0 INSTALL_KUBELAB=0

    # TOOLS:
    export INSTALL_TERRAFORM=0 INSTALL_HELM=0
    export ANSIBLE_INSTALL=1

    # KUBERNETES+INSTALLER VERSIONS:
    # To force a specific version, e.g. "stable-1" or "v1.18.2" set to version here
    # TO upgrade to latest set UPGRADE_KUBE_LATEST=1
    export INSTALL_KUBERNETES=1
    #export K8S_RELEASE="v1.18.2"
    export UPGRADE_KUBE_LATEST=1
    export K8S_INSTALLER="kubeadm"
    #export K8S_INSTALLER="rancher/rke"

    export USERS="ubuntu:sudo"

    # Prisma Cloud specific:
    export DOWNLOAD_PRISMACLOUD=0 INSTALL_PRISMACLOUD=0 CONFIGURE_NFS=0
    export CHECK_COMPLETE_FN=CHECK_FN_K8S

    ## - CREATE_USEFUL_SCRIPTS:
    echo 'kubectl -n frontend set image deploy/nginx nginx=nginx:1.12' > /tmp/reset_nginx_1.12.sh
    chmod +x /tmp/reset_nginx_1.12.sh

    echo 'kubectl -n frontend set image deploy/nginx nginx=nginx:1.18' > /tmp/reset_nginx_1.18.sh
    chmod +x /tmp/reset_nginx_1.18.sh
}

CHECK_FN_K8S() {
    STATE=/tmp/CLUSTER.state
    cp /dev/null $STATE
    {
        echo -n "$BASH_SOURCE: "
        kubectl get pods -A --no-headers | grep -v " Running "						&& { echo -n "FAIL_Pods "; }
        [ $CONFIGURE_NFS -ne 0 ] && {
            [ $(hostname) = "master"  ] && mount | grep -q nfsd						&& { echo -n "OK_nfsd "; }
            [ $(hostname) = "master"  ] && [ -f /var/nfs/general/MOUNTED_from_NODE_worker1.txt ]	&& { echo -n "OK_nfsmnt "; }
            [ $(hostname) != "master" ] && mount | grep -q nfs						&& { echo -n "OK_nfs "; }
            [ $(hostname) != "master" ] && [ -f /nfs/general/MOUNTED_from_NODE_master.txt ]		&& { echo -n "OK_nfsmnt "; }
        }
        echo
    } >> $STATE;
}

CHECK_FN_K8S_PrismaCloud() {
    STATE=/tmp/CLUSTER.state
    cp /dev/null $STATE
    CHECK_FN_K8S

    {
        echo -n "$BASH_SOURCE: "
        kubectl get ns twistlock									|| { echo -n "FAIL_No_twistlock_Namespace"; }
        kubectl get pods -n twistlock --no-headers | grep -E "twistlock-console.* Running "		&& { echo -n "OK_PrismaConsole "; }
        kubectl get pods -n twistlock --no-headers | grep "twistlock-console" | grep -v " Running "	&& { echo -n "FAIL_PrismaConsole "; }
    } >> $STATE;
}

